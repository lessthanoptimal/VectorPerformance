apply plugin: 'java-library'

group 'lessthanoptimal'
version '0.1'

java {
    withJavadocJar()
    withSourcesJar()
    toolchain { languageVersion = JavaLanguageVersion.of(16) }
}

javadoc { configure(options) { enabled=false } }
test { useJUnitPlatform() }

var incubatorArguments = ["--enable-preview","--add-modules", "jdk.incubator.vector"]

tasks.withType(AbstractCompile) { options.compilerArgs += incubatorArguments }
tasks.withType(Test) { jvmArgs += incubatorArguments }

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    ['1.27'].each { String a ->
        api('org.openjdk.jmh:jmh-core:' + a)
        annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:' + a
    }

    ['ejml-core','ejml-ddense'].each { String a ->
        api group: 'org.ejml', name: a, version: '0.40' }

    ['boofcv-ip'].each { String a ->
        implementation group: 'org.boofcv', name: a, version: '0.36' }

    testImplementation( 'org.junit.jupiter:junit-jupiter-api:5.4.0')
    testRuntimeOnly( 'org.junit.jupiter:junit-jupiter-engine:5.4.0')
}

task runtimeBenchmark(type: JavaExec) {
    dependsOn build
    javaLauncher = javaToolchains.launcherFor { languageVersion = JavaLanguageVersion.of(16) }
    jvmArgs += incubatorArguments
    group = "Execution"
    description = "Runs the benchmark code"
    classpath = sourceSets.main.runtimeClasspath
    main = "benchmark.BenchmarkOperations"
}


wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '7.0-milestone-3'
}
